param(
    [string]$expname = "",
    [string]$scan_id = "",
    [switch]$train_cameras = $false,
    [string]$checkpoint = "",
    [switch]$validation_slope_print = $false,
    [switch]$is_continue = $false
)

# Set default options
$use_cuda_blocking = "CUDA_LAUNCH_BLOCKING=1"
$use_cuda_dsa = "TORCH_USE_CUDA_DSA=1"

# Experiment name to config path mapping
$config_paths = @{
    "PositionalEncoding" = "./confs"
    "FourierFeatures" = "./confs/embedder_conf_var/FourierFeatures"
    "HashGrid" = "./confs/embedder_conf_var/HashGrid"
    "HashGridCUDA" = "./confs/embedder_conf_var/HashGrid"
    "NFFB" = "./confs/embedder_conf_var/FFB"
    "NFFB_TCNN" = "./confs/embedder_conf_var/FFB_TCNN"
    # Add more mappings here
}

# Set CUDA environment variables if requested
$cuda_env = ""
if ($use_cuda_blocking -or $use_cuda_dsa) {
    $cuda_env = "SET $use_cuda_blocking ; SET $use_cuda_dsa ;"
}

# Validate required arguments
if (-not $expname -or -not $scan_id -or -not $checkpoint) {
    Write-Host "Usage: ./run_training.ps1 -expname <expname> -scan_id <scan_id> [-train_cameras] -checkpoint <checkpoint> [-validation_slope_print] [-is_continue]"
    exit 1
}

# Get the config path based on the experiment name
$conf_path = $config_paths[$expname]
if (-not $conf_path) {
    Write-Host "Unsupported experiment name: $expname"
    exit 1
}

# Determine config file based on the camera type
if ($expname -eq "PositionalEncoding") {
    $conf_path = "$conf_path/dtu_fixed_cameras.conf"
}
elseif ($train_cameras) {
    $conf_path = "$conf_path/dtu_trained_cameras.conf"
}
else {
    $conf_path = "$conf_path/${expname.ToLower()}_dtu_fixed_cameras.conf"
}

# Construct the Python command
$python_command = "python3 -u ./training/exp_runner.py --conf $conf_path/${expname.ToLower()}_${scan_id}.conf --expname $expname --scan_id $scan_id --checkpoint $checkpoint"
if ($validation_slope_print) {
    $python_command += " --validation_slope_print"
}
if ($is_continue) {
    $python_command += " --is_continue"
}

# Run the command
Invoke-Expression "$cuda_env $python_command"

