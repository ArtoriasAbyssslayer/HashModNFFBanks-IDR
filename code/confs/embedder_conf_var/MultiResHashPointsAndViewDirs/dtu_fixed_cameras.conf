train{
    expname = dtu_fixed_cameras
    dataset_class = datasets.scene_dataset.SceneDataset
    model_class = model.implicit_differentiable_renderer.IDRNetwork
    loss_class = model.loss.IDRLoss
    learning_rate = 1.0e-4
    learning_rate_cam = 1.0e-4
    num_pixels = 2048
    plot_freq = 100
    alpha_milestones = [250,500,750,1000,1250]
    alpha_factor = 2
    sched_milestones = [1000,1500]
    sched_factor = 0.5
}
plot{
    plot_nimgs = 1
    max_depth = 3.0
    resolution = 100 
}
loss{
    eikonal_weight = 0.1
    mask_weight = 100.0
    alpha = 50.0
}
dataset{
    data_dir = DTU
    img_res = [1200, 1600]
    scan_id = 65
}
model{
    feature_vector_size = 256
    implicit_network
    {
        d_in = 3
        d_out = 1
        dims = [ 512, 512, 512, 512, 512, 512, 512, 512 ]
        geometric_init = True
        bias = 0.6
        skip_in = [4]
        weight_norm = True
        multires = 16
    }
    rendering_network
    {
        mode = idr
        d_in = 9
        d_out = 3
        #    View Directions Embedder Selctor #
        # viewdirs_embed_type = ['SHencoder','NerfPos','embedding_network']
        # 1. Non Stationary Frequency
        # 2. Stationary Frequency
        # 3. Deep Embedding Network Used to Encode Implict Network input 
        viewdirs_embed_type = HashGrid
        dims = [ 512, 512, 512, 512]
        weight_norm = True
        multires_view = 4
    }
    ray_tracer
    {
        object_bounding_sphere = 1.0
        sdf_threshold = 5.0e-5
        line_search_step = 0.5
        line_step_iters = 3
        sphere_tracing_iters = 10
        n_steps = 100
        n_secant_steps = 8
    }
    embedding_network {
        #    ~Embedding Network Arguments for driving the implict and rendering network~
        #    embed_type = ['FFB','FFBTcnn','FourierFeatures','HashGrid',"HashGridTcnn"]
        embed_type = HashGrid
        log2_max_hash_size = 15
        max_points_per_entry = 2
        base_resolution = 16
        desired_resolution = 512
        bound = 1.0
    }
}